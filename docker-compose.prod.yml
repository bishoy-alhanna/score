# Production deployment configuration
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: score_postgres_prod
    environment:
      POSTGRES_DB: saas_platform
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema_multi_org.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - score_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./backend/auth-service/auth-service
      dockerfile: Dockerfile
    container_name: score_auth_service_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/saas_platform
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - score_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway/api-gateway
      dockerfile: Dockerfile
    container_name: score_api_gateway_prod
    environment:
      - AUTH_SERVICE_URL=http://auth-service:5001
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=production
    depends_on:
      - auth-service
    networks:
      - score_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./frontend/admin-dashboard/admin-dashboard
      dockerfile: Dockerfile
    container_name: score_admin_dashboard_prod
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
    depends_on:
      - api-gateway
    networks:
      - score_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Dashboard
  user-dashboard:
    build:
      context: ./frontend/user-dashboard/user-dashboard
      dockerfile: Dockerfile
    container_name: score_user_dashboard_prod
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
    depends_on:
      - api-gateway
    networks:
      - score_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: score_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway
      - admin-dashboard
      - user-dashboard
    networks:
      - score_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  score_network:
    driver: bridge